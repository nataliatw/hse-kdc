/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ObservationsIndexImport } from './routes/observations/index'
import { Route as MentoringsIndexImport } from './routes/mentorings/index'
import { Route as InspectionsIndexImport } from './routes/inspections/index'
import { Route as HazardsIndexImport } from './routes/hazards/index'
import { Route as CoachingsIndexImport } from './routes/coachings/index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ObservationsIndexRoute = ObservationsIndexImport.update({
  id: '/observations/',
  path: '/observations/',
  getParentRoute: () => rootRoute,
} as any)

const MentoringsIndexRoute = MentoringsIndexImport.update({
  id: '/mentorings/',
  path: '/mentorings/',
  getParentRoute: () => rootRoute,
} as any)

const InspectionsIndexRoute = InspectionsIndexImport.update({
  id: '/inspections/',
  path: '/inspections/',
  getParentRoute: () => rootRoute,
} as any)

const HazardsIndexRoute = HazardsIndexImport.update({
  id: '/hazards/',
  path: '/hazards/',
  getParentRoute: () => rootRoute,
} as any)

const CoachingsIndexRoute = CoachingsIndexImport.update({
  id: '/coachings/',
  path: '/coachings/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/coachings/': {
      id: '/coachings/'
      path: '/coachings'
      fullPath: '/coachings'
      preLoaderRoute: typeof CoachingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/hazards/': {
      id: '/hazards/'
      path: '/hazards'
      fullPath: '/hazards'
      preLoaderRoute: typeof HazardsIndexImport
      parentRoute: typeof rootRoute
    }
    '/inspections/': {
      id: '/inspections/'
      path: '/inspections'
      fullPath: '/inspections'
      preLoaderRoute: typeof InspectionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/mentorings/': {
      id: '/mentorings/'
      path: '/mentorings'
      fullPath: '/mentorings'
      preLoaderRoute: typeof MentoringsIndexImport
      parentRoute: typeof rootRoute
    }
    '/observations/': {
      id: '/observations/'
      path: '/observations'
      fullPath: '/observations'
      preLoaderRoute: typeof ObservationsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/coachings': typeof CoachingsIndexRoute
  '/hazards': typeof HazardsIndexRoute
  '/inspections': typeof InspectionsIndexRoute
  '/mentorings': typeof MentoringsIndexRoute
  '/observations': typeof ObservationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/coachings': typeof CoachingsIndexRoute
  '/hazards': typeof HazardsIndexRoute
  '/inspections': typeof InspectionsIndexRoute
  '/mentorings': typeof MentoringsIndexRoute
  '/observations': typeof ObservationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/coachings/': typeof CoachingsIndexRoute
  '/hazards/': typeof HazardsIndexRoute
  '/inspections/': typeof InspectionsIndexRoute
  '/mentorings/': typeof MentoringsIndexRoute
  '/observations/': typeof ObservationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/coachings'
    | '/hazards'
    | '/inspections'
    | '/mentorings'
    | '/observations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/coachings'
    | '/hazards'
    | '/inspections'
    | '/mentorings'
    | '/observations'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/coachings/'
    | '/hazards/'
    | '/inspections/'
    | '/mentorings/'
    | '/observations/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  CoachingsIndexRoute: typeof CoachingsIndexRoute
  HazardsIndexRoute: typeof HazardsIndexRoute
  InspectionsIndexRoute: typeof InspectionsIndexRoute
  MentoringsIndexRoute: typeof MentoringsIndexRoute
  ObservationsIndexRoute: typeof ObservationsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  CoachingsIndexRoute: CoachingsIndexRoute,
  HazardsIndexRoute: HazardsIndexRoute,
  InspectionsIndexRoute: InspectionsIndexRoute,
  MentoringsIndexRoute: MentoringsIndexRoute,
  ObservationsIndexRoute: ObservationsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/coachings/",
        "/hazards/",
        "/inspections/",
        "/mentorings/",
        "/observations/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/coachings/": {
      "filePath": "coachings/index.tsx"
    },
    "/hazards/": {
      "filePath": "hazards/index.tsx"
    },
    "/inspections/": {
      "filePath": "inspections/index.tsx"
    },
    "/mentorings/": {
      "filePath": "mentorings/index.tsx"
    },
    "/observations/": {
      "filePath": "observations/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
